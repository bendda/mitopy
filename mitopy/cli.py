import click
import logging
from click_option_group import optgroup

from ._version import __version__

from .preprocess import do_preprocess
from .visualize import do_visualize
from .annotate import do_annotate
from .align import do_align
from .call import do_call
from .merge import do_merge
from .postprocess import do_postprocess
from .coverage import do_coverage
from .haplogroup import do_identify_haplogroup
from .pipeline import do_run_pipeline


@click.group()
@click.version_option(__version__, prog_name="mitopy")
def mitopy():
    """Command-line interface for mitopy."""
    pass


@mitopy.command()
@click.argument(
    "bam",
    type=click.Path(exists=True),
)
@click.option(
    "--bai",
    type=click.Path(exists=True),
    help="BAI index file. If not provided/found, it will be created.",
)
@click.option(
    "--reference-fa",
    type=click.Path(exists=True),
    help="Reference genome FASTA. Only requried if input is a CRAM file.",
)
@click.option(
    "--contig-name",
    type=str,
    help="Name of the mitochondrial contig in the alignment file. If not provided, it will be automatically detected.",
)
@click.option(
    "--out-dir",
    "-o",
    type=click.Path(),
    help="Output directory.",
)
@click.option(
    "--prefix",
    "-p",
    type=str,
    help="Prefix for output files.",
)
@click.option(
    "--verbose",
    "-v",
    type=bool,
    default=False,
    help="Verbosity. If true, record logs generated by the underlying tools.",
)
def preprocess(**kwargs):
    """Preprocess the input BAM file for mitochondrial variant calling and analysis.

    BAM is the alignment file to preprocess.
    """
    do_preprocess(**kwargs)


@mitopy.command()
@click.argument(
    "ubam",
    type=click.Path(exists=True),
)
@click.option(
    "--mt-ref",
    type=click.Choice(["rCRS", "RSRS"], case_sensitive=False),
    default="rCRS",
    help="Mitochondrial reference to align against.",
)
@click.option(
    "--shifted",
    type=bool,
    show_default=True,
    default=False,
    help="Shifted mode. If true, perform alignment to shifted mitochondrial reference.",
)
@click.option(
    "--ncores",
    "-c",
    type=int,
    default=1,
    help="Number of cores.",
)
@click.option(
    "--out-dir",
    "-o",
    type=click.Path(),
    help="Output directory",
)
@click.option(
    "--prefix",
    "-p",
    type=str,
    help="Prefix for output files.",
)
@click.option(
    "--verbose",
    "-v",
    type=bool,
    default=False,
    help="Verbosity. If true, record logs generated by the underlying tools.",
)
def align(**kwargs):
    """Align UBAM to (shifted) mitochondrial reference.

    UBAM contains unaligned mitochondrial reads.
    """
    do_align(**kwargs)


@mitopy.command()
@click.argument(
    "bam",
    type=click.Path(exists=True),
)
@click.option(
    "--mt-ref",
    type=click.Choice(["rCRS", "RSRS"], case_sensitive=False),
    default="rCRS",
    help="Mitochondrial reference to call variants against.",
)
@click.option(
    "--m2-extra-args",
    type=str,
    default="",
    help="Extra arguments to pass onto Mutect2 variant caller.",
)
@click.option(
    "--shifted",
    type=bool,
    show_default=True,
    default=False,
    help="Shifted mode.",
)
@click.option(
    "--out-dir",
    "-o",
    type=click.Path(),
    help="Output directory.",
)
@click.option(
    "--verbose",
    "-v",
    type=bool,
    default=False,
    help="Verbosity. If true, record logs generated by the underlying tools.",
)
@click.option(
    "--prefix",
    "-p",
    type=str,
    help="Prefix for output files.",
)
def call(**kwargs):
    """Call mitochondrial variants from input BAM.

    BAM contains the reads aligned to mitochondrial reference.
    """
    do_call(**kwargs)


@mitopy.command()
@click.argument(
    "vcf",
    type=click.Path(exists=True),
)
@click.argument(
    "vcf-shifted",
    type=click.Path(exists=True),
)
@click.option(
    "--stats",
    type=click.Path(exists=True),
    help="Canonical stats.",
)
@click.option(
    "--stats-shifted",
    type=click.Path(exists=True),
    help="Shifted stats.",
)
@click.option(
    "--mt-ref",
    type=click.Choice(["rCRS", "RSRS"], case_sensitive=False),
    default="rCRS",
    help="Mitochondrial reference.",
)
@click.option(
    "--out-dir",
    "-o",
    type=click.Path(),
    help="Output directory.",
)
@click.option(
    "--prefix",
    "-p",
    type=str,
    help="Prefix for output files.",
)
@click.option(
    "--verbose",
    "-v",
    type=bool,
    default=False,
    help="Verbosity. If true, record logs generated by the underlying tools.",
)
def merge(**kwargs):
    """Merge Mutect2 calls and stats.

    VCF contains variant calls from non-control region.
    VCF_SHIFTED contains variant calls from control region.
    """
    do_merge(**kwargs)


@mitopy.command()
@click.argument(
    "vcf",
    type=click.Path(exists=True),
)
@click.option(
    "--stats",
    type=click.Path(exists=True),
    help="Mutect2 stats.",
)
@click.option(
    "--mt-ref",
    type=click.Choice(["rCRS", "RSRS"], case_sensitive=False),
    default="rCRS",
    help="Mitochondrial reference.",
)
@click.option(
    "--f-score-beta",
    type=float,
    help="F score beta. Specifies the relative weight of recall and precision for the filtering strategy.",
    default=1.0,
)
@click.option(
    "--vaf-treshold",
    type=float,
    help="Minimum variant allele fraction treshold. All sites with variant allele fraction below the treshold will be filtered.",
    default=0,
)
@click.option(
    "--blacklisted-sites",
    type=click.Path(exists=True),
    help="Custom BED file containing blacklisted sites (the BED index file has to be present as well). If not specified, the default blacklist for chosen MT reference will be used.",
)
@click.option(
    "--autosomal-coverage",
    type=float,
    default=0,
    help="Median autosomal coverage. Set to activate filter against errounesly mapped NuMTs.",
)
@click.option(
    "--contamination-filter",
    type=bool,
    show_default=True,
    default=False,
    help="Contamination filter. If true, sample contamination level will be estimated using Haplocheck and variants will be filtered.",
)
@click.option(
    "--remove-non-pass",
    type=bool,
    show_default=True,
    default=True,
    help="Remove variants not passing the enabled filters from final VCF file.",
)
@click.option(
    "--normalize",
    type=bool,
    show_default=True,
    default=True,
    help="Split multi-allelic sites and left-align variant calls.",
)
@click.option(
    "--out-dir",
    "-o",
    type=click.Path(),
    help="Output directory.",
)
@click.option(
    "--prefix",
    "-p",
    type=str,
    help="Prefix for output files.",
)
@click.option(
    "--verbose",
    "-v",
    type=bool,
    default=False,
    help="Verbosity. If true, record logs generated by the underlying tools.",
)
def postprocess(**kwargs):
    """Filter and normalize raw variant calls.

    VCF contains raw variant calls.
    """
    do_postprocess(**kwargs)


@mitopy.command()
@click.argument(
    "mt-bam",
    type=click.Path(exists=True),
)
@click.argument(
    "shifted-mt-bam",
    type=click.Path(exists=True),
)
@click.option(
    "--mt-bai", type=click.Path(exists=True), help="Index file for input BAM."
)
@click.option(
    "--shifted-mt-bai",
    type=click.Path(exists=True),
    help="Index file for input shifted BAM.",
)
@click.option(
    "--create-plot",
    type=bool,
    show_default=True,
    default=True,
    help="Create coverage plot (HTML).",
)
@click.option(
    "--out-dir",
    "-o",
    type=click.Path(),
    help="Output directory",
)
@click.option(
    "--prefix",
    "-p",
    type=str,
    help="Prefix for output files.",
)
@click.option(
    "--verbose",
    "-v",
    type=bool,
    default=False,
    help="Verbosity. If true, record logs generated by the underlying tools.",
)
def coverage(**kwargs):
    """Get combined per base coverage.

    MT_BAM contains reads aligned to mitochondrial genome.
    SHIFTED_MT_BAM contains reads aligned to shifted mitochondrial genome.
    """
    do_coverage(**kwargs)


@mitopy.command()
@click.argument(
    "vcf",
    type=click.Path(exists=True),
)
@click.option(
    "--min-hom-treshold",
    type=float,
    help="Minimum homoplasmy level treshold. Annotate variants above this treshold as homoplasmic, otherwise heteroplasmic.",
    default=0.95,
    required=False,
)
@click.option(
    "--population-freqs",
    type=bool,
    show_default=True,
    default=True,
    help="Annotate variants with population frequencies from GnomAD databse.",
)
@click.option(
    "--conservation-scores",
    type=bool,
    show_default=True,
    default=True,
    help="Include conservation scores from PhyloP100way and PhastConst100way in annotations.",
)
@click.option(
    "--patho-predictions",
    type=bool,
    show_default=True,
    default=True,
    help="Annotate variants with in-silico pathogenicity predictions from SIFT, MitoTIP and PON-mt-trna.",
)
@click.option(
    "--phenotype-annot",
    type=bool,
    show_default=True,
    default=True,
    help="Annotate variants with phenotype information from MITOMAP and ClinVar database.",
)
@click.option(
    "--create-csv",
    is_flag=True,
    show_default=True,
    default=True,
    help="Export annotated variants to human-readable CSV format.",
)
@click.option(
    "--out-dir",
    "-o",
    type=click.Path(),
    help="Output directory",
)
@click.option(
    "--prefix",
    "-p",
    type=str,
    help="Prefix for output files.",
)
@click.option(
    "--verbose",
    "-v",
    type=bool,
    default=False,
    help="Verbosity. If true, record logs generated by the underlying tools.",
)
def annotate(**kwargs):
    """Annotate mitochondrial variants.

    VCF contains variants to annotate.
    """
    do_annotate(**kwargs)


@mitopy.command()
@click.argument(
    "vcf",
    type=click.Path(exists=True),
)
@click.option(
    "--coverage-csv",
    type=click.Path(exists=True),
    help="CSV file with coverage per-base. If provided, coverage will be included in the final visualization.",
    required=False,
)
@click.option(
    "--split-strands",
    type=bool,
    show_default=True,
    default=False,
    help="Split H and L strand of mitochondrial genome in the visualization.",
)
@click.option(
    "--save-as-png",
    type=bool,
    show_default=True,
    default=False,
    help="Additionally, save plot as static PNG image.",
)
@click.option(
    "--out-dir",
    "-o",
    type=click.Path(),
    help="Output directory",
)
@click.option(
    "--prefix",
    "-p",
    type=str,
    help="Prefix for output files.",
)
def visualize(**kwargs):
    """Generate VCF visualization.

    VCF contains variants to visualize.
    """
    do_visualize(**kwargs)


@mitopy.command()
@click.argument(
    "vcf",
    type=click.Path(exists=True),
)
@click.option(
    "--mt-ref",
    type=click.Choice(["rCRS", "RSRS"], case_sensitive=False),
    default="rCRS",
    help="Mitochondrial reference.",
)
@click.option(
    "--out-dir",
    "-o",
    type=click.Path(),
    help="Output directory",
)
@click.option(
    "--prefix",
    "-p",
    type=str,
    help="Prefix for output files.",
)
@click.option(
    "--verbose",
    "-v",
    type=bool,
    default=False,
    help="Verbosity. If true, record logs generated by the underlying tools.",
)
def identify_haplogroup(**kwargs):
    """Identify sample haplogroup.

    VCF file contains sample variants.
    """
    do_identify_haplogroup(**kwargs)


# WHOLE PIPELINE
@mitopy.command()
@click.argument(
    "bam",
    type=click.Path(exists=True),
)
@click.option(
    "--bai",
    type=click.Path(exists=True),
    help="BAI index file. If not provided/found, it will be created.",
)
@click.option(
    "--mt-ref",
    type=click.Choice(["rCRS", "RSRS"], case_sensitive=False),
    default="rCRS",
    help="Mitochondrial reference.",
)
@click.option(
    "--reference-fa",
    type=click.Path(exists=True),
    help="Reference genome FASTA. Only requried if input is a CRAM file.",
)
@click.option(
    "--contig-name",
    type=str,
    help="Name of the mitochondrial contig (based on the genome reference). If not provided, it will be detected from input BAM file.",
)
@click.option(
    "--out-dir",
    "-o",
    type=click.Path(),
    help="Output directory.",
)
@click.option(
    "--prefix",
    "-p",
    type=str,
    help="Prefix for output files.",
)
@click.option(
    "--verbose",
    "-v",
    type=bool,
    default=False,
    help="Verbosity. If true, record logs generated by the underlying tools.",
)
@click.option(
    "--ncores",
    "-c",
    type=int,
    default=1,
    help="Number of cores.",
)
@click.option(
    "--tmp-dir",
    "-tmp",
    type=click.Path(),
    help="Output directory.",
)
@click.option(
    "--remove-tmp",
    type=bool,
    default=False,
    help="Remove intermediate files.",
)
@click.option(
    "--m2-extra-args",
    type=str,
    default="",
    help="Extra arguments to pass onto Mutect2 variant caller.",
)
@optgroup.group(
    "Variant postprocessing",
    help="Variant filtering and normalization options",
)
@optgroup.option(
    "--f-score-beta",
    type=float,
    help="F score beta. Specifies the relative weight of recall and precision for the filtering strategy.",
    default=1,
)
@optgroup.option(
    "--vaf-treshold",
    type=float,
    help="Minimum variant allele fraction treshold. All sites with variant allele fraction below the treshold will be filtered.",
    default=0,
)
@optgroup.option(
    "--blacklisted-sites",
    type=click.Path(exists=True),
    help="Custom BED file containing blacklisted sites (the BED index file has to be present as well). If not specified, the default blacklist for chosen MT reference will be used.",
)
@optgroup.option(
    "--autosomal-coverage",
    type=float,
    default=0,
    help="Median autosomal coverage. Set to activate filter against errounesly mapped NuMTs.",
)
@optgroup.option(
    "--contamination-filter",
    is_flag=True,
    show_default=True,
    default=False,
    help="Contamination filter. If true, sample contamination level will be estimated using Haplocheck and variants will be filtered.",
)
@optgroup.option(
    "--remove-non-pass",
    type=bool,
    show_default=True,
    default=True,
    help="Remove variants not passing the enabled filters from final VCF file.",
)
@optgroup.option(
    "--normalize",
    type=bool,
    show_default=True,
    default=True,
    help="Split multi-allelic sites and left-align variant calls.",
)
@optgroup.group(
    "Annotation",
    help="Annotation options",
)
@optgroup.option(
    "--min-hom-treshold",
    type=float,
    help="Minimum homoplasmy level treshold. Annotate variants above this treshold as homoplasmic, otherwise heteroplasmic.",
    default=0.95,
    required=False,
)
@optgroup.option(
    "--population-freqs",
    type=bool,
    show_default=True,
    default=True,
    help="Annotate variants with population frequencies from GnomAD databse.",
)
@optgroup.option(
    "--conservation-scores",
    type=bool,
    show_default=True,
    default=True,
    help="Include conservation scores from PhyloP100way and PhastConst100way in annotations.",
)
@optgroup.option(
    "--patho-predictions",
    type=bool,
    show_default=True,
    default=True,
    help="Annotate variants with pathogenicity predictions from SIFT, MitoTIP and PON-mt-trna.",
)
@optgroup.option(
    "--phenotype-annot",
    type=bool,
    show_default=True,
    default=True,
    help="Annotate variants with phenotype information from MITOMAP and ClinVar database.",
)
@optgroup.option(
    "--create-annotation-report",
    type=bool,
    show_default=True,
    default=True,
    help="Create annotation report in CSV format.",
)
@optgroup.group(
    "Visualization",
    help="Visualization options",
)
@optgroup.option(
    "--split-strands",
    type=bool,
    show_default=True,
    default=False,
    help="Split H and L strand of mitochondrial genome in the visualization.",
)
@optgroup.option(
    "--save-as-png",
    type=bool,
    show_default=True,
    default=False,
    help="Additionally, save plot as static PNG image.",
)
def run_pipeline(**kwargs):
    """Run the whole single-sample mitopy pipeline on input BAM file.

    BAM is the file to run the analysis on.
    """
    do_run_pipeline(**kwargs)
